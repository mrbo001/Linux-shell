#!/bin/bash

######################### 定义多线程 ping 网段################################
parallel_ping() {
  local ips=$(seq $2 $3) 
  parallel -j $4 ping $1.{} -w 5 ::: $ips
}

################################ ping文件 ###################################
# 当输入参数为文件时，读取文件到字典
ping_file_dec(){
  while read -r line; do
   name=$(echo "$line" | awk '{print $1}')
   ip=$(echo "$line" | awk '{print $2}')

   ips[$name]="$ip" 
  done < "ping.txt"
}
#当输入参数为文件时ping字典
ping_ip_dec(){
  for name in "${!ips[@]}"; do
    echo -e "----------------------------------"
    echo -e "ping  $name -> ${ips[$name]}"
    # "\033[31m这是红色文字\033[0m"
    ping ${ips[$name]} -w 3
	  sleep 3
  done
}

##############################显示ping结果##################################
# 1. 用grep提取出所有ping的IP地址,正则表达式'^PING \K[\d\.]+(?= \()'匹配以PING开头,然后取IP地址部分
# 2. 用while read逐行读取提取的IP地址
# 3. 对每个IP,再grep查看是否有"0% packet loss",有就输出ok,没有就输出no
# 这样可以逐行检查每个IP的ping结果,只输出简单的ok/no状态
awk_ping(){
  awk -F'[ ]+' '
  /^ping/ {name=$2}
  /^PING/ {ip=$2}
  /packet loss/ {
   if($6=="0%") {
    print "\033[32m" name, " " ip,":ok\033[0m"  
   } else {
    print "\033[31m" name, " " ip,":no\033[0m"
   }
  }' ping.log
}
awk_ping_ok(){
  awk -F'[ ]+' '
  /^PING/ {ip=$2}
  /packet loss/ {
   if($6=="0%") {
     print "\033[32m" ip,":ok\033[0m"  
   } else {
    #  print "\033[31m" ip,":no\033[0m"
   }
  }' ping.log
}
awk_ping_no(){
  awk -F'[ ]+' '
  /^PING/ {ip=$2}
  /packet loss/ {
   if($6=="0%") {
    #  print "\033[32m" ip,":ok\033[0m"  
   } else {
     print "\033[31m" ip,":no\033[0m"
   }
  }' ping.log
}

##########执行时显示一个点点进度条#######
progress(){
        echo -n "Under execution: please wait..."
        #执行无限while循环
        while true
        do
                echo -n "."
                #休眠2秒
                sleep 2
        done
}
#杀死...进程
progress_kill(){
        kill $MYSELF > /dev/null 2>&1
        echo -n "...done."
        echo
}
#######################################




##################################   开始    ################################
#开始提示
echo  "----------------------------------------------"
echo  "两种使用方法："
echo  "->ping的网段参数,未输入参数时,使用示例的。"
echo  "  参数：  |    IP      |  起始  | 结束 | 线程数"
echo  "  示例：   192.168.199    204     205     50  "
echo  "->输入IP文件的名称,格式:"
echo  "  GDT0332a1	192.168.199.204"
echo  "  GDT02aa0a	192.168.199.205"
echo  "----------------------------------------------"
read -p "YOU,Please:" command
num_fields=$(echo $command | wc -w)   #判断参数的个数

if [ $num_fields -eq 0 ]; then   #未输入时的测试参数
  command="192.168.199 204 208 10"
  #将点点progress()函数放在后台运行
  progress &
  #保存点点progress()运行的进程号
  MYSELF=$!
  # 调用ping函数, 也可以保存结果到文件
  #      调用     |      IP      |  起始  | 结束 | 线程数
  # parallel_ping   192.168.199      1      200     50
  parallel_ping $command > ping.log
  #任务执行完杀死...进程
  progress_kill
elif [ $num_fields -eq 1 ]; then #输入file时的测试参数
  if [ -e $command ]; then
    declare -A ips
    echo "$command yes "
    ping_file_dec
    ping_ip_dec | tee ping.log
  else 
    echo "$command no "
    echo "文件不存！"
    exit 1
  fi
elif [ $num_fields -eq 4 ]; then #输入网段参数后
  echo "启动!"
  #将点点progress()函数放在后台运行
  progress &
  #保存点点progress()运行的进程号
  MYSELF=$!
  # 调用ping函数, 也可以保存结果到文件
  #      调用     |      IP      |  起始  | 结束 | 线程数
  # parallel_ping   192.168.199      1      200     50
  parallel_ping $command > ping.log
  #任务执行完杀死...进程
  progress_kill
else                             #输入错误参数后              
  echo "参数错误，输入你文件名或网段参数！"
  exit 1
fi



###########################循环显示ping结果################################
while true
do
#显示ping的结果
  echo "显示 $command 结果："
  echo "参数：  | null |  y  |  n  |  q "
  echo "示例：    all    ok    no    quit  "
  read -p "Check ping results? (y/n/q) " choice
  #直接读取键盘来选择,还有问题
  # read -n1 key
  case $choice in
    y) awk_ping_ok ;;
    n) awk_ping_no ;;
    q) exit 1;;
    *) awk_ping
  esac
done
